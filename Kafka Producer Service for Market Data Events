"""
Kafka Producer Service for Market Data Events
"""
import json
import logging
from typing import Dict, Any, Optional
from confluent_kafka import Producer, KafkaError
from app.core.config import settings
from app.schemas.market_data import PriceEvent

logger = logging.getLogger(__name__)

class KafkaProducerService:
    def __init__(self):
        self.producer_config = {
            'bootstrap.servers': settings.KAFKA_BOOTSTRAP_SERVERS,
            'client.id': 'market-data-producer',
            'acks': 'all',  # Wait for all replicas to acknowledge
            'retries': 3,
            'retry.backoff.ms': 100,
            'delivery.timeout.ms': 30000,
            'request.timeout.ms': 30000,
        }
        self.producer = Producer(self.producer_config)
        self.topic = settings.KAFKA_TOPIC_PRICE_EVENTS

    def delivery_report(self, err: Optional[KafkaError], msg) -> None:
        """Delivery report callback for produced messages"""
        if err is not None:
            logger.error(f'Message delivery failed: {err}')
        else:
            logger.info(f'Message delivered to {msg.topic()} [{msg.partition()}] at offset {msg.offset()}')

    async def produce_price_event(self, price_event: PriceEvent) -> bool:
        """
        Produce a price event to Kafka topic
        
        Args:
            price_event: PriceEvent schema object
            
        Returns:
            bool: True if message was successfully queued for delivery
        """
        try:
            # Convert PriceEvent to dict and then to JSON
            message_value = json.dumps(price_event.dict())
            
            # Produce message
            self.producer.produce(
                topic=self.topic,
                key=price_event.symbol,  # Use symbol as key for partitioning
                value=message_value,
                callback=self.delivery_report
            )
            
            # Trigger delivery report callbacks
            self.producer.poll(0)
            
            logger.info(f"Price event queued for symbol: {price_event.symbol}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to produce price event: {str(e)}")
            return False

    def flush_and_close(self, timeout: float = 10.0) -> None:
        """
        Flush pending messages and close producer
        
        Args:
            timeout: Maximum time to wait for pending messages
        """
        try:
            # Wait for pending messages to be delivered
            remaining = self.producer.flush(timeout)
            if remaining > 0:
                logger.warning(f'{remaining} messages still pending after flush timeout')
            
            logger.info("Kafka producer closed successfully")
            
        except Exception as e:
            logger.error(f"Error closing Kafka producer: {str(e)}")

# Global producer instance
kafka_producer = KafkaProducerService()

async def get_kafka_producer() -> KafkaProducerService:
    """Dependency injection for Kafka producer"""
    return kafka_producer
