"""
Kafka Consumer Service for processing market data events.
"""
import asyncio
import json
import logging
import signal
import sys
from typing import Dict, List, Optional
from datetime import datetime, timezone

from confluent_kafka import Consumer, KafkaException, KafkaError
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from app.core.config import get_settings
from app.core.database import get_async_session, engine
from app.models.market_data import ProcessedPrice, MovingAverage
from app.core.logging import setup_logging

# Setup logging
logger = logging.getLogger(__name__)


class MovingAverageCalculator:
    """Calculate moving averages for market data."""
    
    @staticmethod
    def calculate_simple_moving_average(prices: List[float], period: int = 5) -> Optional[float]:
        """Calculate simple moving average."""
        if len(prices) < period:
            return None
        
        return sum(prices[-period:]) / period


class MarketDataConsumer:
    """Kafka consumer for processing market data events."""
    
    def __init__(self):
        self.settings = get_settings()
        self.consumer = None
        self.running = False
        self.setup_consumer()
        
    def setup_consumer(self):
        """Setup Kafka consumer configuration."""
        consumer_config = {
            'bootstrap.servers': self.settings.kafka_bootstrap_servers,
            'group.id': 'market-data-processor',
            'auto.offset.reset': 'earliest',
            'enable.auto.commit': True,
            'auto.commit.interval.ms': 1000,
            'max.poll.interval.ms': 300000,
            'session.timeout.ms': 10000,
            'heartbeat.interval.ms': 3000,
        }
        
        self.consumer = Consumer(consumer_config)
        self.consumer.subscribe(['price-events'])
        logger.info("Kafka consumer configured and subscribed to 'price-events' topic")
    
    async def process_price_event(self, message_data: Dict) -> None:
        """Process a single price event message."""
        try:
            symbol = message_data.get('symbol')
            price = float(message_data.get('price', 0))
            timestamp = datetime.fromisoformat(
                message_data.get('timestamp', '').replace('Z', '+00:00')
            )
            source = message_data.get('source')
            raw_response_id = message_data.get('raw_response_id')
            
            if not symbol or not price:
                logger.warning(f"Invalid message data: {message_data}")
                return
            
            async with get_async_session() as session:
                # Store processed price
                processed_price = ProcessedPrice(
                    symbol=symbol,
                    price=price,
                    timestamp=timestamp,
                    source=source,
                    raw_response_id=raw_response_id
                )
                session.add(processed_price)
                
                # Calculate and store moving average
                await self.calculate_and_store_moving_average(
                    session, symbol, price, timestamp
                )
                
                await session.commit()
                logger.info(f"Processed price event for {symbol}: ${price}")
                
        except Exception as e:
            logger.error(f"Error processing price event: {e}", exc_info=True)
    
    async def calculate_and_store_moving_average(
        self, 
        session: AsyncSession, 
        symbol: str, 
        current_price: float,
        timestamp: datetime
    ) -> None:
        """Calculate and store moving average."""
        try:
            # Get last 5 prices for this symbol
            stmt = (
                select(ProcessedPrice.price)
                .where(ProcessedPrice.symbol == symbol)
                .order_by(ProcessedPrice.timestamp.desc())
                .limit(5)
            )
            result = await session.execute(stmt)
            recent_prices = [row[0] for row in result.fetchall()]
            
            # Add current price
            recent_prices.insert(0, current_price)
            
            # Calculate 5-period moving average
            period = 5
            if len(recent_prices) >= period:
                ma_value = MovingAverageCalculator.calculate_simple_moving_average(
                    recent_prices, period
                )
                
                if ma_value is not None:
                    # Check if we already have a moving average for this timestamp
                    existing_stmt = (
                        select(MovingAverage)
                        .where(
                            MovingAverage.symbol == symbol,
                            MovingAverage.timestamp == timestamp,
                            MovingAverage.period == period
                        )
                    )
                    existing_result = await session.execute(existing_stmt)
                    existing_ma = existing_result.scalar_one_or_none()
                    
                    if existing_ma:
                        # Update existing moving average
                        existing_ma.value = ma_value
                        existing_ma.updated_at = datetime.now(timezone.utc)
                    else:
                        # Create new moving average
                        moving_average = MovingAverage(
                            symbol=symbol,
                            period=period,
                            value=ma_value,
                            timestamp=timestamp
                        )
                        session.add(moving_average)
                    
                    logger.info(f"Calculated {period}-period MA for {symbol}: {ma_value:.2f}")
            
        except Exception as e:
            logger.error(f"Error calculating moving average for {symbol}: {e}", exc_info=True)
    
    async def consume_messages(self):
        """Main consumer loop."""
        logger.info("Starting message consumption...")
        self.running = True
        
        try:
            while self.running:
                try:
                    # Poll for messages
                    msg = self.consumer.poll(timeout=1.0)
                    
                    if msg is None:
                        continue
                    
                    if msg.error():
                        if msg.error().code() == KafkaError._PARTITION_EOF:
                            logger.debug(f"Reached end of partition: {msg.partition()}")
                        else:
                            logger.error(f"Consumer error: {msg.error()}")
                        continue
                    
                    # Process message
                    try:
                        message_data = json.loads(msg.value().decode('utf-8'))
                        await self.process_price_event(message_data)
                        
                    except json.JSONDecodeError as e:
                        logger.error(f"Failed to decode message: {e}")
                    except Exception as e:
                        logger.error(f"Error processing message: {e}", exc_info=True)
                
                except KafkaException as e:
                    logger.error(f"Kafka exception: {e}")
                    await asyncio.sleep(5)  # Wait before retrying
                
                # Small sleep to prevent busy waiting
                await asyncio.sleep(0.1)
                
        except Exception as e:
            logger.error(f"Consumer loop error: {e}", exc_info=True)
        finally:
            self.close()
    
    def close(self):
        """Close the consumer."""
        if self.consumer:
            logger.info("Closing Kafka consumer...")
            self.consumer.close()
            self.running = False
    
    def handle_shutdown(self, signum, frame):
        """Handle shutdown signals."""
        logger.info(f"Received signal {signum}, shutting down gracefully...")
        self.running = False


async def main():
    """Main entry point for the consumer service."""
    # Setup logging
    setup_logging()
    logger.info("Starting Market Data Consumer Service...")
    
    # Create consumer instance
    consumer = MarketDataConsumer()
    
    # Setup signal handlers for graceful shutdown
    def signal_handler(signum, frame):
        consumer.handle_shutdown(signum, frame)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # Start consuming messages
        await consumer.consume_messages()
    except KeyboardInterrupt:
        logger.info("Received keyboard interrupt, shutting down...")
    except Exception as e:
        logger.error(f"Consumer service error: {e}", exc_info=True)
    finally:
        consumer.close()
        logger.info("Consumer service stopped")


if __name__ == "__main__":
    asyncio.run(main())
