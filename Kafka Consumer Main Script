"""
Kafka Consumer Main Script
consumer_main.py
"""
import asyncio
import logging
import signal
import sys
from contextlib import asynccontextmanager
from app.core.config import settings
from app.core.database import init_db
from app.services.kafka_consumer import kafka_consumer, start_kafka_consumer

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler('consumer.log')
    ]
)

logger = logging.getLogger(__name__)

class GracefulShutdown:
    """Handle graceful shutdown of the consumer"""
    
    def __init__(self):
        self.shutdown = False
        
    def exit_gracefully(self, signum, frame):
        logger.info(f"Received signal {signum}, initiating graceful shutdown...")
        self.shutdown = True
        kafka_consumer.stop_consuming()

async def main():
    """Main consumer application"""
    shutdown_handler = GracefulShutdown()
    
    # Register signal handlers
    signal.signal(signal.SIGINT, shutdown_handler.exit_gracefully)
    signal.signal(signal.SIGTERM, shutdown_handler.exit_gracefully)
    
    try:
        logger.info("Starting Market Data Consumer Service")
        logger.info(f"Kafka Bootstrap Servers: {settings.KAFKA_BOOTSTRAP_SERVERS}")
        logger.info(f"Topic: {settings.KAFKA_TOPIC_PRICE_EVENTS}")
        
        # Initialize database
        logger.info("Initializing database...")
        await init_db()
        
        # Start Kafka consumer
        logger.info("Starting Kafka consumer...")
        await start_kafka_consumer()
        
    except KeyboardInterrupt:
        logger.info("Consumer interrupted by user")
    except Exception as e:
        logger.error(f"Consumer error: {str(e)}")
        sys.exit(1)
    finally:
        logger.info("Consumer service stopped")

if __name__ == "__main__":
    asyncio.run(main())
