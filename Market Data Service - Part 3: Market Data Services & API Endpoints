# Market Data Service - Part 3: Market Data Services & API Endpoints

## Step 1: Create Market Data Provider Interface

Create `app/services/providers/__init__.py`:
```python
from .base import MarketDataProvider
from .alpha_vantage import AlphaVantageProvider
from .yahoo_finance import YahooFinanceProvider
from .finnhub import FinnhubProvider
from .factory import get_provider

__all__ = [
    "MarketDataProvider",
    "AlphaVantageProvider", 
    "YahooFinanceProvider",
    "FinnhubProvider",
    "get_provider",
]
```

Create `app/services/providers/base.py`:
```python
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
from datetime import datetime
from decimal import Decimal


class MarketDataResponse:
    """Standardized market data response"""
    
    def __init__(
        self,
        symbol: str,
        price: Decimal,
        timestamp: datetime,
        provider: str,
        volume: Optional[Decimal] = None,
        raw_data: Optional[Dict[str, Any]] = None,
        response_time_ms: Optional[int] = None,
    ):
        self.symbol = symbol
        self.price = price
        self.timestamp = timestamp
        self.provider = provider
        self.volume = volume
        self.raw_data = raw_data or {}
        self.response_time_ms = response_time_ms


class MarketDataProvider(ABC):
    """Abstract base class for market data providers"""
    
    def __init__(self, api_key: Optional[str] = None):
        self.api_key = api_key
        self.provider_name = self.__class__.__name__.lower().replace("provider", "")
    
    @abstractmethod
    async def fetch_latest_price(self, symbol: str) -> MarketDataResponse:
        """Fetch the latest price for a symbol"""
        pass
    
    @abstractmethod 
    async def fetch_multiple_prices(self, symbols: list[str]) -> list[MarketDataResponse]:
        """Fetch latest prices for multiple symbols"""
        pass
    
    @abstractmethod
    def get_rate_limit(self) -> tuple[int, int]:
        """Return (calls_per_period, period_seconds)"""
        pass
    
    @abstractmethod
    async def validate_symbol(self, symbol: str) -> bool:
        """Validate if symbol exists"""
        pass
```

Create `app/services/providers/alpha_vantage.py`:
```python
import httpx
import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone
from decimal import Decimal
import logging

from .base import MarketDataProvider, MarketDataResponse
from app.core.config import settings

logger = logging.getLogger(__name__)


class AlphaVantageProvider(MarketDataProvider):
    """Alpha Vantage market data provider"""
    
    BASE_URL = "https://www.alphavantage.co"
    
    def __init__(self, api_key: Optional[str] = None):
        super().__init__(api_key or settings.ALPHA_VANTAGE_API_KEY)
        if not self.api_key:
            raise ValueError("Alpha Vantage API key is required")
    
    async def fetch_latest_price(self, symbol: str) -> MarketDataResponse:
        """Fetch latest price for a single symbol"""
        start_time = datetime.now()
        
        params = {
            "function": "GLOBAL_QUOTE",
            "symbol": symbol,
            "apikey": self.api_key,
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            try:
                response = await client.get(f"{self.BASE_URL}/query", params=params)
                response.raise_for_status()
                data = response.json()
                
                response_time = int((datetime.now() - start_time).total_seconds() * 1000)
                
                # Check for API error
                if "Error Message" in data:
                    raise ValueError(f"Alpha Vantage error: {data['Error Message']}")
                
                if "Note" in data:
                    raise ValueError(f"Alpha Vantage rate limit: {data['Note']}")
                
                # Parse Global Quote response
                quote = data.get("Global Quote", {})
                if not quote:
                    raise ValueError(f"No data found for symbol {symbol}")
                
                price = Decimal(quote.get("05. price", "0"))
                volume = Decimal(quote.get("06. volume", "0"))
                
                # Parse timestamp (Alpha Vantage uses latest trading day)
                latest_day = quote.get("07. latest trading day", "")
                timestamp = datetime.fromisoformat(latest_day).replace(tzinfo=timezone.utc)
                
                return MarketDataResponse(
                    symbol=symbol,
                    price=price,
                    timestamp=timestamp,
                    provider="alpha_vantage",
                    volume=volume,
                    raw_data=data,
                    response_time_ms=response_time,
                )
                
            except httpx.HTTPError as e:
                logger.error(f"HTTP error fetching {symbol} from Alpha Vantage: {e}")
                raise
            except Exception as e:
                logger.error(f"Error fetching {symbol} from Alpha Vantage: {e}")
                raise
    
    async def fetch_multiple_prices(self, symbols: List[str]) -> List[MarketDataResponse]:
        """Fetch prices for multiple symbols with rate limiting"""
        results = []
        semaphore = asyncio.Semaphore(5)  # Limit concurrent requests
        
        async def fetch_with_semaphore(symbol: str):
            async with semaphore:
                try:
                    result = await self.fetch_latest_price(symbol)
                    return result
                except Exception as e:
                    logger.error(f"Failed to fetch {symbol}: {e}")
                    return None
        
        tasks = [fetch_with_semaphore(symbol) for symbol in symbols]
        responses = await asyncio.gather(*tasks, return_exceptions=True)
        
        for response in responses:
            if isinstance(response, MarketDataResponse):
                results.append(response)
        
        return results
    
    def get_rate_limit(self) -> tuple[int, int]:
        """Alpha Vantage free tier: 5 calls per minute"""
        return (5, 60)
    
    async def validate_symbol(self, symbol: str) -> bool:
        """Validate symbol by attempting to fetch it"""
        try:
            await self.fetch_latest_price(symbol)
            return True
        except Exception:
            return False
```

Create `app/services/providers/yahoo_finance.py`:
```python
import yfinance as yf
from typing import List, Optional
from datetime import datetime, timezone
from decimal import Decimal
import logging

from .base import MarketDataProvider, MarketDataResponse

logger = logging.getLogger(__name__)


class YahooFinanceProvider(MarketDataProvider):
    """Yahoo Finance provider using yfinance library"""
    
    def __init__(self, api_key: Optional[str] = None):
        super().__init__(api_key)  # Yahoo Finance doesn't require API key
    
    async def fetch_latest_price(self, symbol: str) -> MarketDataResponse:
        """Fetch latest price for a single symbol"""
        start_time = datetime.now()
        
        try:
            ticker = yf.Ticker(symbol)
            hist = ticker.history(period="1d", interval="1m")
            
            if hist.empty:
                raise ValueError(f"No data found for symbol {symbol}")
            
            # Get the latest data point
            latest = hist.iloc[-1]
            price = Decimal(str(latest['Close']))
            volume = Decimal(str(latest['Volume']))
            timestamp = latest.name.to_pydatetime().replace(tzinfo=timezone.utc)
            
            response_time = int((datetime.now() - start_time).total_seconds() * 1000)
            
            return MarketDataResponse(
                symbol=symbol,
                price=price,
                timestamp=timestamp,
                provider="yahoo_finance",
                volume=volume,
                raw_data=hist.to_dict(),
                response_time_ms=response_time,
            )
            
        except Exception as e:
            logger.error(f"Error fetching {symbol} from Yahoo Finance: {e}")
            raise
    
    async def fetch_multiple_prices(self, symbols: List[str]) -> List[MarketDataResponse]:
        """Fetch prices for multiple symbols"""
        results = []
        
        try:
            # Yahoo Finance supports batch requests
            tickers = yf.Tickers(' '.join(symbols))
            
            for symbol in symbols:
                try:
                    ticker = getattr(tickers.tickers, symbol, None)
                    if ticker:
                        hist = ticker.history(period="1d", interval="1m")
                        if not hist.empty:
                            latest = hist.iloc[-1]
                            price = Decimal(str(latest['Close']))
                            volume = Decimal(str(latest['Volume']))
                            timestamp = latest.name.to_pydatetime().replace(tzinfo=timezone.utc)
                            
                            results.append(MarketDataResponse(
                                symbol=symbol,
                                price=price,
                                timestamp=timestamp,
                                provider="yahoo_finance",
                                volume=volume,
                                raw_data=hist.to_dict(),
                            ))
                except Exception as e:
                    logger.error(f"Failed to fetch {symbol}: {e}")
                    continue
        
        except Exception as e:
            logger.error(f"Error fetching multiple symbols: {e}")
        
        return results
    
    def get_rate_limit(self) -> tuple[int, int]:
        """Yahoo Finance has no official rate limit but recommend reasonable usage"""
        return (100, 60)  # Conservative estimate
    
    async def validate_symbol(self, symbol: str) -> bool:
        """Validate symbol by attempting to fetch basic info"""
        try:
            ticker = yf.Ticker(symbol)
            info = ticker.info
            return bool(info and 'symbol' in info)
        except Exception:
            return False
```

Create `app/services/providers/finnhub.py`:
```python
import httpx
import asyncio
from typing import Dict, Any, Optional, List
from datetime import datetime, timezone
from decimal import Decimal
import logging

from .base import MarketDataProvider, MarketDataResponse
from app.core.config import settings

logger = logging.getLogger(__name__)


class FinnhubProvider(MarketDataProvider):
    """Finnhub market data provider"""
    
    BASE_URL = "https://finnhub.io/api/v1"
    
    def __init__(self, api_key: Optional[str] = None):
        super().__init__(api_key or settings.FINNHUB_API_KEY)
        if not self.api_key:
            raise ValueError("Finnhub API key is required")
    
    async def fetch_latest_price(self, symbol: str) -> MarketDataResponse:
        """Fetch latest price for a single symbol"""
        start_time = datetime.now()
        
        params = {
            "symbol": symbol,
            "token": self.api_key,
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            try:
                response = await client.get(f"{self.BASE_URL}/quote", params=params)
                response.raise_for_status()
                data = response.json()
                
                response_time = int((datetime.now() - start_time).total_seconds() * 1000)
                
                # Check for API error
                if "error" in data:
                    raise ValueError(f"Finnhub error: {data['error']}")
                
                current_price = data.get("c")
                if current_price is None or current_price == 0:
                    raise ValueError(f"No current price data for symbol {symbol}")
                
                price = Decimal(str(current_price))
                timestamp = datetime.fromtimestamp(data.get("t", 0), tz=timezone.utc)
                
                return MarketDataResponse(
                    symbol=symbol,
                    price=price,
                    timestamp=timestamp,
                    provider="finnhub",
                    volume=None,  # Volume not included in basic quote
                    raw_data=data,
                    response_time_ms=response_time,
                )
                
            except httpx.HTTPError as e:
                logger.error(f"HTTP error fetching {symbol} from Finnhub: {e}")
                raise
            except Exception as e:
                logger.error(f"Error fetching {symbol} from Finnhub: {e}")
                raise
    
    async def fetch_multiple_prices(self, symbols: List[str]) -> List[MarketDataResponse]:
        """Fetch prices for multiple symbols with rate limiting"""
        results = []
        semaphore = asyncio.Semaphore(10)  # Higher limit for Finnhub
        
        async def fetch_with_semaphore(symbol: str):
            async with semaphore:
                try:
                    await asyncio.sleep(0.1)  # Small delay to respect rate limits
                    result = await self.fetch_latest_price(symbol)
                    return result
                except Exception as e:
                    logger.error(f"Failed to fetch {symbol}: {e}")
                    return None
        
        tasks = [fetch_with_semaphore(symbol) for symbol in symbols]
        responses = await asyncio.gather(*tasks, return_exceptions=True)
        
        for response in responses:
            if isinstance(response, MarketDataResponse):
                results.append(response)
        
        return results
    
    def get_rate_limit(self) -> tuple[int, int]:
        """Finnhub free tier: 60 calls per minute"""
        return (60, 60)
    
    async def validate_symbol(self, symbol: str) -> bool:
        """Validate symbol by attempting to fetch it"""
        try:
            await self.fetch_latest_price(symbol)
            return True
        except Exception:
            return False
```

Create `app/services/providers/factory.py`:
```python
from typing import Optional
from .base import MarketDataProvider
from .alpha_vantage import AlphaVantageProvider
from .yahoo_finance import YahooFinanceProvider  
from .finnhub import FinnhubProvider
from app.core.config import settings


def get_provider(provider_name: Optional[str] = None) -> MarketDataProvider:
    """Factory function to get market data provider"""
    provider_name = provider_name or settings.MARKET_DATA_PROVIDER
    
    providers = {
        "alpha_vantage": AlphaVantageProvider,
        "yahoo_finance": YahooFinanceProvider,
        "finnhub": FinnhubProvider,
    }
    
    provider_class = providers.get(provider_name.lower())
    if not provider_class:
        raise ValueError(f"Unknown provider: {provider_name}")
    
    return provider_class()
```

## Step 2: Create Market Data Service

Create `app/services/market_data.py`:
```python
from typing import Optional, List
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, desc
from datetime import datetime, timezone
import logging
import uuid

from app.models.market_data import RawMarketDataResponse, ProcessedPricePoint, PollingJobConfig
from app.services.providers import get_provider, MarketDataResponse
from app.schemas.market_data import PriceResponse, PollingJobRequest, PollingJobResponse

logger = logging.getLogger(__name__)


class MarketDataService:
    """Service for managing market data operations"""
    
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def get_latest_price(
        self, 
        symbol: str, 
        provider: Optional[str] = None
    ) -> PriceResponse:
        """Get latest price for a symbol"""
        # First check database for recent data (within last 5 minutes)
        recent_cutoff = datetime.now(timezone.utc).timestamp() - 300  # 5 minutes
        
        query = select(ProcessedPricePoint).where(
            ProcessedPricePoint.symbol == symbol.upper()
        ).order_by(desc(ProcessedPricePoint.timestamp)).limit(1)
        
        result = await self.db.execute(query)
        recent_price = result.scalar_one_or_none()
        
        if recent_price and recent_price.timestamp.timestamp() > recent_cutoff:
            return PriceResponse(
                symbol=recent_price.symbol,
                price=recent_price.price,
                timestamp=recent_price.timestamp,
                provider=recent_price.provider,
                volume=recent_price.volume,
            )
        
        # Fetch fresh data from provider
        provider_instance = get_provider(provider)
        market_data = await provider_instance.fetch_latest_price(symbol.upper())
        
        # Store raw response
        raw_response = RawMarketDataResponse(
            symbol=market_data.symbol,
            provider=market_data.provider,
            raw_response=market_data.raw_data,
            response_time_ms=market_data.response_time_ms,
        )
        self.db.add(raw_response)
        await self.db.flush()
        
        # Store processed price point
        processed_price = ProcessedPricePoint(
            symbol=market_data.symbol,
            price=market_data.price,
            timestamp=market_data.timestamp,
            provider=market_data.provider,
            raw_response_id=raw_response.id,
            volume=market_data.volume,
        )
        self.db.add(processed_price)
        await self.db.commit()
        
        return PriceResponse(
            symbol=market_data.symbol,
            price=market_data.price,
            timestamp=market_data.timestamp,
            provider=market_data.provider,
            volume=market_data.volume,
        )
    
    async def create_polling_job(self, job_request: PollingJobRequest) -> PollingJobResponse:
        """Create a new polling job"""
        job_id = f"poll_{uuid.uuid4().hex[:8]}"
        
        # Validate symbols
        provider_instance = get_provider(job_request.provider.value)
        valid_symbols = []
        
        for symbol in job_request.symbols:
            try:
                is_valid = await provider_instance.validate_symbol(symbol.upper())
                if is_valid:
                    valid_symbols.append(symbol.upper())
                else:
                    logger.warning(f"Invalid symbol: {symbol}")
            except Exception as e:
                logger.error(f"Error validating symbol {symbol}: {e}")
        
        if not valid_symbols:
            raise ValueError("No valid symbols provided")
        
        # Create job configuration
        job_config = PollingJobConfig(
            job_id=job_id,
            symbols=valid_symbols,
            interval_seconds=job_request.interval,
            provider=job_request.provider.value,
            status="accepted",
        )
        
        self.db.add(job_config)
        await self.db.commit()
        
        return PollingJobResponse(
            job_id=job_id,
            status="accepted",
            config={
                "symbols": valid_symbols,
                "interval": job_request.interval,
                "provider": job_request.provider.value,
            }
        )
    
    async def get_job_status(self, job_id: str) -> Optional[dict]:
        """Get status of a polling job"""
        query = select(PollingJobConfig).where(PollingJobConfig.job_id == job_id)
        result = await self.db.execute(query)
        job = result.scalar_one_or_none()
        
        if not job:
            return None
        
        return {
            "job_id": job.job_id,
            "status": job.status,
            "symbols": job.symbols,
            "interval": job.interval_seconds,
            "provider": job.provider,
            "last_poll_at": job.last_poll_at,
            "error_count": job.error_count,
            "created_at": job.created_at,
        }
    
    async def store_market_data_batch(self, market_data_list: List[MarketDataResponse]) -> None:
        """Store multiple market data responses"""
        for market_data in market_data_list:
            # Store raw response
            raw_response = RawMarketDataResponse(
                symbol=market_data.symbol,
                provider=market_data.provider,
                raw_response=market_data.raw_data,
                response_time_ms=market_data.response_time_ms,
            )
            self.db.add(raw_response)
            await self.db.flush()
            
            # Store processed price point
            processed_price = ProcessedPricePoint(
                symbol=market_data.symbol,
                price=market_data.price,
                timestamp=market_data.timestamp,
                provider=market_data.provider,
                raw_response_id=raw_response.id,
                volume=market_data.volume,
            )
            self.db.add(processed_price)
        
        await self.db.commit()
        logger.info(f"Stored {len(market_data_list)} market data points")
```

## Step 3: Create API Endpoints

Create `app/api/v1/endpoints/prices.py`:
```python
from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import Optional

from app.core.database import get_db
from app.services.market_data import MarketDataService
from app.schemas.market_data import PriceResponse, PollingJobRequest, PollingJobResponse

router = APIRouter()


@router.get("/latest", response_model=PriceResponse)
async def get_latest_price(
    symbol: str = Query(..., description="Stock symbol (e.g., AAPL)"),
    provider: Optional[str] = Query(None, description="Data provider (alpha_vantage, yahoo_finance, finnhub)"),
    db: AsyncSession = Depends(get_db)
):
    """
    Get the latest price for a stock symbol.
    
    - **symbol**: Stock symbol to fetch (required)
    - **provider**: Data provider to use (optional, uses default if not specified)
    
    Returns the latest price data with timestamp and provider information.
    """
    try:
        service = MarketDataService(db)
        price_data = await service.get_latest_price(symbol, provider)
        return price_data
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to fetch price: {str(e)}")


@router.post("/poll", response_model=PollingJobResponse, status_code=202)
async def create_polling_job(
    job_request: PollingJobRequest,
    db: AsyncSession = Depends(get_db)
):
    """
    Create a polling job to continuously fetch prices for multiple symbols.
    
    - **symbols**: List of stock symbols to poll (1-50 symbols)
    - **interval**: Polling interval in seconds (30-3600)
    - **provider**: Data provider to use
    
    Returns job ID and configuration for tracking the polling job.
    """
    try:
        service = MarketDataService(db)
        job_response = await service.create_polling_job(job_request)
        return job_response
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to create polling job: {str(e)}")
```

Create `app/api/v1/endpoints/jobs.py`:
```python
from fastapi import APIRouter, Depends, HTTPException, Path
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_db
from app.services.market_data import MarketDataService

router = APIRouter()


@router.get("/{job_id}")
async def get_job_status(
    job_id: str = Path(..., description="Job ID to check status for"),
    db: AsyncSession = Depends(get_db)
):
    """
    Get the status of a polling job.
    
    - **job_id**: The job ID returned when creating a polling job
    
    Returns current job status, configuration, and execution details.
    """
    try:
        service = MarketDataService(db)
        job_status = await service.get_job_status(job_id)
        
        if not job_status:
            raise HTTPException(status_code=404, detail="Job not found")
        
        return job_status
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get job status: {str(e)}")


@router.delete("/{job_id}")
async def stop_job(
    job_id: str = Path(..., description="Job ID to stop"),
    db: AsyncSession = Depends(get_db)
):
    """
    Stop a polling job.
    
    - **job_id**: The job ID to stop
    
    Marks the job as stopped, preventing further polling.
    """
    try:
        service = MarketDataService(db)
        job_status = await service.get_job_status(job_id)
        
        if not job_status:
            raise HTTPException(status_code=404, detail="Job not found")
        
        # Update job status to stopped
        # This would be implemented in the service layer
        return {"message": f"Job {job_id} stopped successfully"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to stop job: {str(e)}")
```

Create `app/api/v1/endpoints/health.py`:
```python
from fastapi import APIRouter, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
import time

from app.core.database import get_db
from app.core.config import settings

router = APIRouter()


@router.get("/detailed")
async def detailed_health_check(db: AsyncSession = Depends(get_db)):
    """
    Detailed health check including database connectivity.
    """
    health_status = {
        "status": "healthy",
        "timestamp": time.time(),
        "service": settings.PROJECT_NAME,
        "version": settings.VERSION,
        "checks": {}
    }
    
    # Database health check
    try:
        await db.execute(text("SELECT 1"))
        health_status["checks"]["database"] = {"status": "healthy", "response_time_ms": 0}
    except Exception as e:
        health_status["status"] = "unhealthy"
        health_status["checks"]["database"] = {
            "status": "unhealthy", 
            "error": str(e)
        }
    
    # Add more health checks as needed (Redis, Kafka, etc.)
    
    return health_status
```

## Step 4: Update requirements to include yfinance

Add to `requirements/base.txt`:
```txt
yfinance==0.2.28
```

## Step 5: Git Commit for Part 3

```bash
git add .
git commit -m "Implement market data services and API endpoints

- Created market data provider interface with Alpha Vantage, Yahoo Finance, and Finnhub implementations
- Added provider factory for easy switching between data sources
- Implemented MarketDataService for business logic and data persistence
- Created REST API endpoints for fetching prices and managing polling jobs
- Added comprehensive error handling and logging
- Implemented health check endpoints with database connectivity tests
- Ready for Kafka integration and streaming pipeline"
```

