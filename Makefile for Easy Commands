.PHONY: help install dev-install lint format test test-unit test-integration coverage run docker-build docker-up docker-down clean

help:
	@echo "Available commands:"
	@echo "  make install        Install production dependencies"
	@echo "  make dev-install    Install development dependencies"
	@echo "  make lint           Run linters (flake8, mypy)"
	@echo "  make format         Format code with black and isort"
	@echo "  make test           Run all tests"
	@echo "  make test-unit      Run unit tests only"
	@echo "  make test-integration Run integration tests only"
	@echo "  make coverage       Run tests with coverage report"
	@echo "  make run            Run the application locally"
	@echo "  make docker-build   Build Docker images"
	@echo "  make docker-up      Start all services with Docker Compose"
	@echo "  make docker-down    Stop all Docker services"
	@echo "  make clean          Clean up cache and temp files"

install:
	pip install -r requirements/base.txt

dev-install:
	pip install -r requirements/dev.txt
	pre-commit install

lint:
	flake8 app tests
	mypy app
	black --check app tests
	isort --check-only app tests

format:
	black app tests
	isort app tests

test:
	pytest tests -v

test-unit:
	pytest tests/unit -v

test-integration:
	pytest tests/integration -v

coverage:
	pytest tests --cov=app --cov-report=html --cov-report=term
	@echo "Coverage report generated in htmlcov/index.html"

run:
	uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

docker-build:
	docker-compose build

docker-up:
	docker-compose up -d
	@echo "Waiting for services to start..."
	@sleep 10
	docker-compose exec api python scripts/init_db.py
	@echo "Services are ready!"
	@echo "API: http://localhost:8000"
	@echo "API Docs: http://localhost:8000/docs"

docker-down:
	docker-compose down -v

docker-logs:
	docker-compose logs -f

docker-ps:
	docker-compose ps

db-init:
	python scripts/init_db.py

db-upgrade:
	alembic upgrade head

db-downgrade:
	alembic downgrade -1

clean:
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	find . -type d -name ".mypy_cache" -exec rm -rf {} +
	find . -type f -name ".coverage" -delete
	rm -rf htmlcov/
	rm -rf dist/
	rm -rf build/
