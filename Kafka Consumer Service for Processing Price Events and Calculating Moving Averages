"""
Updated Pydantic Schemas with Kafka Events
app/schemas/market_data.py
"""
from datetime import datetime
from typing import Optional, List, Dict, Any
from pydantic import BaseModel, Field, validator

class PriceResponse(BaseModel):
    """Response schema for price data"""
    symbol: str = Field(..., description="Stock symbol")
    price: float = Field(..., description="Current price")
    timestamp: datetime = Field(..., description="Timestamp of the price")
    provider: str = Field(..., description="Data provider name")

    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }

class PriceEvent(BaseModel):
    """Kafka message schema for price events"""
    symbol: str = Field(..., description="Stock symbol")
    price: float = Field(..., description="Price value")
    timestamp: datetime = Field(..., description="Event timestamp")
    source: str = Field(..., description="Data source/provider")
    raw_response_id: str = Field(..., description="Reference to raw response")

    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }

class PollRequest(BaseModel):
    """Request schema for polling job creation"""
    symbols: List[str] = Field(..., description="List of symbols to poll")
    interval: int = Field(..., ge=60, description="Polling interval in seconds (minimum 60)")
    provider: Optional[str] = Field(None, description="Preferred data provider")

    @validator('symbols')
    def validate_symbols(cls, v):
        if not v:
            raise ValueError('At least one symbol is required')
        if len(v) > 10:
            raise ValueError('Maximum 10 symbols allowed per poll job')
        return [symbol.upper().strip() for symbol in v]

class PollResponse(BaseModel):
    """Response schema for poll job creation"""
    job_id: str = Field(..., description="Unique job identifier")
    status: str = Field(..., description="Job status")
    config: Dict[str, Any] = Field(..., description="Job configuration")

class MovingAverageResponse(BaseModel):
    """Response schema for moving average data"""
    symbol: str = Field(..., description="Stock symbol")
    moving_average: float = Field(..., description="Calculated moving average")
    window_size: int = Field(..., description="Window size used for calculation")
    timestamp: datetime = Field(..., description="Calculation timestamp")

    class Config:
        json_encoders = {
            datetime: lambda v: v.isoformat()
        }

class HealthCheckResponse(BaseModel):
    """Health check response schema"""
    status: str = Field(..., description="Service status")
    service: str = Field(..., description="Service name")
    timestamp: datetime = Field(..., description="Check timestamp")
    kafka_status: Optional[str] = Field(None, description="Kafka connection status")
    database_status: Optional[str] = Field(None, description="Database connection status")
    cache_status: Optional[str] = Field(None, description="Cache connection status")

class ErrorResponse(BaseModel):
    """Error response schema"""
    error: str = Field(..., description="Error type")
    message: str = Field(..., description="Error message")
    timestamp: datetime = Field(..., description="Error timestamp")
    request_id: Optional[str] = Field(None, description="Request identifier")

# Base schemas for database models
class PriceDataBase(BaseModel):
    """Base schema for price data"""
    symbol: str
    price: float
    provider: str
    timestamp: datetime

class PriceDataCreate(PriceDataBase):
    """Schema for creating price data"""
    raw_response_id: Optional[str] = None

class PriceDataInDB(PriceDataBase):
    """Schema for price data from database"""
    id: int
    raw_response_id: Optional[str] = None

    class Config:
        from_attributes = True

class MovingAverageBase(BaseModel):
    """Base schema for moving average"""
    symbol: str
    moving_average: float
    window_size: int
    timestamp: datetime

class MovingAverageCreate(MovingAverageBase):
    """Schema for creating moving average"""
    pass

class MovingAverageInDB(MovingAverageBase):
    """Schema for moving average from database"""
    id: int

    class Config:
        from_attributes = True

class RawMarketDataBase(BaseModel):
    """Base schema for raw market data"""
    symbol: str
    provider: str
    raw_response: Dict[str, Any]
    timestamp: datetime

class RawMarketDataCreate(RawMarketDataBase):
    """Schema for creating raw market data"""
    id: str

class RawMarketDataInDB(RawMarketDataBase):
    """Schema for raw market data from database"""
    id: str

    class Config:
        from_attributes = True

class PollJobBase(BaseModel):
    """Base schema for poll job"""
    job_id: str
    symbols: List[str]
    interval: int
    provider: str
    status: str

class PollJobCreate(PollJobBase):
    """Schema for creating poll job"""
    pass

class PollJobInDB(PollJobBase):
    """Schema for poll job from database"""
    created_at: datetime
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
