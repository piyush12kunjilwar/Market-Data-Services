"""
Market Data Service for fetching and processing stock prices.
"""
import asyncio
import logging
from abc import ABC, abstractmethod
from datetime import datetime, timezone
from typing import Dict, List, Optional, Any
import uuid

import aiohttp
import yfinance as yf
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from app.core.config import get_settings
from app.core.database import get_async_session
from app.models.market_data import RawMarketData, ProcessedPrice
from app.services.kafka_producer import get_kafka_producer
from app.core.cache import get_redis_client

logger = logging.getLogger(__name__)


class MarketDataProvider(ABC):
    """Abstract base class for market data providers."""
    
    @abstractmethod
    async def get_latest_price(self, symbol: str) -> Dict[str, Any]:
        """Get latest price for a symbol."""
        pass
    
    @abstractmethod
    def get_provider_name(self) -> str:
        """Get provider name."""
        pass


class AlphaVantageProvider(MarketDataProvider):
    """Alpha Vantage market data provider."""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://www.alphavantage.co/query"
        self.session = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """Get or create HTTP session."""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def get_latest_price(self, symbol: str) -> Dict[str, Any]:
        """Get latest price from Alpha Vantage."""
        try:
            session = await self._get_session()
            
            params = {
                'function': 'GLOBAL_QUOTE',
                'symbol': symbol,
                'apikey': self.api_key
            }
            
            async with session.get(self.base_url, params=params) as response:
                if response.status != 200:
                    raise Exception(f"HTTP {response.status}: {await response.text()}")
                
                data = await response.json()
                
                # Check for API errors
                if 'Error Message' in data:
                    raise Exception(f"Alpha Vantage error: {data['Error Message']}")
                
                if 'Note' in data:
                    raise Exception(f"Alpha Vantage rate limit: {data['Note']}")
                
                # Extract price data
                quote_data = data.get('Global Quote', {})
                if not quote_data:
                    raise Exception("No quote data received")
                
                return {
                    'symbol': quote_data.get('01. symbol', symbol),
                    'price': float(quote_data.get('05. price', 0)),
                    'timestamp': datetime.now(timezone.utc),
                    'raw_response': data,
                    'provider': self.get_provider_name()
                }
                
        except Exception as e:
            logger.error(f"Error fetching price from Alpha Vantage for {symbol}: {e}")
            raise
    
    def get_provider_name(self) -> str:
        return "alpha_vantage"
    
    async def close(self):
        """Close HTTP session."""
        if self.session and not self.session.closed:
            await self.session.close()


class YahooFinanceProvider(MarketDataProvider):
    """Yahoo Finance market data provider."""
    
    def __init__(self):
        pass
    
    async def get_latest_price(self, symbol: str) -> Dict[str, Any]:
        """Get latest price from Yahoo Finance."""
        try:
            # Run yfinance in thread pool to avoid blocking
            loop = asyncio.get_event_loop()
            ticker_data = await loop.run_in_executor(
                None, 
                self._fetch_ticker_data, 
                symbol
            )
            
            return ticker_data
            
        except Exception as e:
            logger.error(f"Error fetching price from Yahoo Finance for {symbol}: {e}")
            raise
    
    def _fetch_ticker_data(self, symbol: str) -> Dict[str, Any]:
        """Fetch ticker data synchronously."""
        ticker = yf.Ticker(symbol)
        info = ticker.info
        
        # Get current price
        current_price = info.get('currentPrice') or info.get('regularMarketPrice', 0)
        
        if not current_price:
            raise Exception(f"No price data found for {symbol}")
        
        return {
            'symbol': symbol,
            'price': float(current_price),
            'timestamp': datetime.now(timezone.utc),
            'raw_response': info,
            'provider': self.get_provider_name()
        }
    
    def get_provider_name(self) -> str:
        return "yahoo_finance"


class FinnhubProvider(MarketDataProvider):
    """Finnhub market data provider."""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://finnhub.io/api/v1"
        self.session = None
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """Get or create HTTP session."""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def get_latest_price(self, symbol: str) -> Dict[str, Any]:
        """Get latest price from Finnhub."""
        try:
            session = await self._get_session()
            
            params = {
                'symbol': symbol,
                'token': self.api_key
            }
            
            async with session.get(f"{self.base_url}/quote", params=params) as response:
                if response.status != 200:
                    raise Exception(f"HTTP {response.status}: {await response.text()}")
                
                data = await response.json()
                
                # Check for errors
                if 'error' in data:
                    raise Exception(f"Finnhub error: {data['error']}")
                
                current_price = data.get('c', 0)  # Current price
                if not current_price:
                    raise Exception(f"No price data found for {symbol}")
                
                return {
                    'symbol': symbol,
                    'price': float(current_price),
                    'timestamp': datetime.now(timezone.utc),
                    'raw_response': data,
                    'provider': self.get_provider_name()
                }
                
        except Exception as e:
            logger.error(f"Error fetching price from Finnhub for {symbol}: {e}")
            raise
    
    def get_provider_name(self) -> str:
        return "finnhub"
    
    async def close(self):
        """Close HTTP session."""
        if self.session and not self.session.closed:
            await self.session.close()


class MarketDataService:
    """Service for managing market data operations."""
    
    def __init__(self):
        self.settings = get_settings()
        self.providers = self._setup_providers()
        self.kafka_producer = get_kafka_producer()
        self.redis_client = get_redis_client()
    
    def _setup_providers(self) -> Dict[str, MarketDataProvider]:
        """Setup market data providers."""
        providers = {}
        
        # Alpha Vantage
        if self.settings.alpha_vantage_api_key:
            providers['alpha_vantage'] = AlphaVantageProvider(self.settings.alpha_vantage_api_key)
        
        # Yahoo Finance (always available)
        providers['yahoo_finance'] = YahooFinanceProvider()
        
        # Finnhub (if API key provided)
        if getattr(self.settings, 'finnhub_api_key', None):
            providers['finnhub'] = FinnhubProvider(self.settings.finnhub_api_key)
        
        logger.info(f"Initialized providers: {list(providers.keys())}")
        return providers
    
    def get_available_providers(self) -> List[str]:
        """Get list of available providers."""
        return list(self.providers.keys())
    
    async def get_latest_price(
        self, 
        symbol: str, 
        provider: Optional[str] = None,
        use_cache: bool = True
    ) -> Dict[str, Any]:
        """Get latest price for a symbol."""
        try:
            # Validate symbol
            symbol = symbol.upper().strip()
            if not symbol:
                raise ValueError("Symbol cannot be empty")
            
            # Check cache first
            if use_cache:
                cache_key = f"price:{symbol}:{provider or 'default'}"
                cached_data = await self.redis_client.get(cache_key)
                if cached_data:
                    logger.debug(f"Returning cached price for {symbol}")
                    return cached_data
            
            # Determine provider
            if provider:
                if provider not in self.providers:
                    raise ValueError(f"Provider '{provider}' not available")
                selected_provider = self.providers[provider]
            else:
                # Use first available provider
                if not self.providers:
                    raise Exception("No market data providers available")
                selected_provider = next(iter(self.providers.values()))
            
            # Fetch data
            logger.info(f"Fetching price for {symbol} from {selected_provider.get_provider_name()}")
            price_data = await selected_provider.get_latest_price(symbol)
            
            # Store raw data in database
            raw_response_id = await self._store_raw_data(
                symbol, 
                price_data['raw_response'], 
                selected_provider.get_provider_name()
            )
            
            # Store processed data
            await self._store_processed_data(
                symbol,
                price_data['price'],
                price_data['timestamp'],
                selected_provider.get_provider_name(),
                raw_response_id
            )
            
            # Publish to Kafka
            await self.kafka_producer.publish_price_event(
                symbol=symbol,
                price=price_data['price'],
                timestamp=price_data['timestamp'],
                source=selected_provider.get_provider_name(),
                raw_response_id=raw_response_id
            )
            
            # Cache result
            if use_cache:
                result_data = {
                    'symbol': symbol,
                    'price': price_data['price'],
                    'timestamp': price_data['timestamp'].isoformat(),
                    'provider': selected_provider.get_provider_name()
                }
                await self.redis_client.setex(
                    cache_key, 
                    60,  # Cache for 1 minute
                    result_data
                )
            
            return {
                'symbol': symbol,
                'price': price_data['price'],
                'timestamp': price_data['timestamp'].isoformat(),
                'provider': selected_provider.get_provider_name()
            }
            
        except Exception as e:
            logger.error(f"Error getting latest price for {symbol}: {e}")
            raise
    
    async def _store_raw_data(
        self, 
        symbol: str, 
        raw_response: Dict, 
        provider: str
    ) -> str:
        """Store raw market data response."""
        try:
            raw_response_id = str(uuid.uuid4())
            
            async with get_async_session() as session:
                raw_data = RawMarketData(
                    id=raw_response_id,
                    symbol=symbol,
                    provider=provider,
                    response_data=raw_response,
                    timestamp=datetime.now(timezone.utc)
                )
                session.add(raw_data)
                await session.commit()
                
            return raw_response_id
            
        except Exception as e:
            logger.error(f"Error storing raw data for {symbol}: {e}")
            raise
    
    async def _store_processed_data(
        self,
        symbol: str,
        price: float,
        timestamp: datetime,
        source: str,
        raw_response_id: str
    ) -> None:
        """Store processed price data."""
        try:
            async with get_async_session() as session:
                processed_price = ProcessedPrice(
                    symbol=symbol,
                    price=price,
                    timestamp=timestamp,
                    source=source,
                    raw_response_id=raw_response_id
                )
                session.add(processed_price)
                await session.commit()
                
        except Exception as e:
            logger.error(f"Error storing processed data for {symbol}: {e}")
            raise
    
    async def get_price_history(
        self, 
        symbol: str, 
        limit: int = 100
    ) -> List[Dict[str, Any]]:
        """Get price history for a symbol."""
        try:
            async with get_async_session() as session:
                stmt = (
                    select(ProcessedPrice)
                    .where(ProcessedPrice.symbol == symbol)
                    .order_by(ProcessedPrice.timestamp.desc())
                    .limit(limit)
                )
                result = await session.execute(stmt)
                prices = result.scalars().all()
                
                return [
                    {
                        'symbol': price.symbol,
                        'price': price.price,
                        'timestamp': price.timestamp.isoformat(),
                        'source': price.source
                    }
                    for price in prices
                ]
                
        except Exception as e:
            logger.error(f"Error getting price history for {symbol}: {e}")
            raise
    
    async def close(self):
        """Close all provider connections."""
        for provider in self.providers.values():
            if hasattr(provider, 'close'):
                await provider.close()


# Global service instance
_market_data_service = None


def get_market_data_service() -> MarketDataService:
    """Get or create market data service instance."""
    global _market_data_service
    if _market_data_service is None:
        _market_data_service = MarketDataService()
    return _market_data_service
